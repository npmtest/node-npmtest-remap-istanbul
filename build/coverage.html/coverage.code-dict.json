{"/home/travis/build/npmtest/node-npmtest-remap-istanbul/test.js":"/* istanbul instrument in package npmtest_remap_istanbul */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-remap-istanbul/lib.npmtest_remap_istanbul.js":"/* istanbul instrument in package npmtest_remap_istanbul */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_remap_istanbul = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_remap_istanbul = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-remap-istanbul/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-remap-istanbul && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_remap_istanbul */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_remap_istanbul\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_remap_istanbul.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_remap_istanbul.rollup.js'] =\n            local.assetsDict['/assets.npmtest_remap_istanbul.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_remap_istanbul.__dirname + '/lib.npmtest_remap_istanbul.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-remap-istanbul/node_modules/remap-istanbul/lib/main.js":"(function (define) {\n\tdefine(['module', 'exports', './loadCoverage', './remap', './writeReport', '../utils/node!istanbul/lib/store/memory'], function (module, exports, _loadCoverage2, _remap2, _writeReport2, _memory) {\n\t\t'use strict';\n\n\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\tvalue: true\n\t\t});\n\t\texports.writeReport = exports.remap = exports.loadCoverage = undefined;\n\n\t\texports.default = function (sources, reports, reportOptions) {\n\t\t\tvar sourceStore = new _memory2.default();\n\t\t\tvar collector = (0, _remap3.default)((0, _loadCoverage3.default)(sources), {\n\t\t\t\tsources: sourceStore\n\t\t\t});\n\n\t\t\tif (!Object.keys(sourceStore.map).length) {\n\t\t\t\tsourceStore = undefined;\n\t\t\t}\n\n\t\t\treturn Promise.all(Object.keys(reports).map(function (reportType) {\n\t\t\t\treturn (0, _writeReport3.default)(collector, reportType, reportOptions || {}, reports[reportType], sourceStore);\n\t\t\t}));\n\t\t};\n\n\t\tvar _loadCoverage3 = _interopRequireDefault(_loadCoverage2);\n\n\t\tvar _remap3 = _interopRequireDefault(_remap2);\n\n\t\tvar _writeReport3 = _interopRequireDefault(_writeReport2);\n\n\t\tvar _memory2 = _interopRequireDefault(_memory);\n\n\t\tfunction _interopRequireDefault(obj) {\n\t\t\treturn obj && obj.__esModule ? obj : {\n\t\t\t\tdefault: obj\n\t\t\t};\n\t\t}\n\n\t\t/* jshint node:true */\n\t\t/* global Promise */\n\t\tvar loadCoverage = exports.loadCoverage = _loadCoverage3.default;\n\t\tvar remap = exports.remap = _remap3.default;\n\t\tvar writeReport = exports.writeReport = _writeReport3.default;\n\n\t\t/**\n   * The basic API for utilising remap-istanbul\n   * @param  {Array|string} sources The sources that could be consumed and remapped.\n   *                                For muliple sources to be combined together, provide\n   *                                an array of strings.\n   * @param  {Object} reports An object where each key is the report type required and the value\n   *                          is the destination for the report.\n   * @param  {Object} reportOptions? An object containing the report options.\n   * @return {Promise}         A promise that will resolve when all the reports are written.\n   */\n\t\t;\n\t\tmodule.exports = exports['default'];\n\t\tmodule.exports.loadCoverage = exports['loadCoverage'];\n\t\tmodule.exports.remap = exports['remap'];\n\t\tmodule.exports.writeReport = exports['writeReport'];\n\t});\n})(typeof define !== 'function' ? require('amdefine')(module) : define);\n//# sourceMappingURL=main.js.map","/home/travis/build/npmtest/node-npmtest-remap-istanbul/node_modules/remap-istanbul/lib/loadCoverage.js":"(function (define) {\n\tdefine(['module', 'exports', '../utils/node!istanbul', 'fs'], function (module, exports, _nodeIstanbul, _fs) {\n\t\t'use strict';\n\n\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\tvalue: true\n\t\t});\n\t\texports.default = loadCoverage;\n\n\t\tvar _fs2 = _interopRequireDefault(_fs);\n\n\t\tfunction _interopRequireDefault(obj) {\n\t\t\treturn obj && obj.__esModule ? obj : {\n\t\t\t\tdefault: obj\n\t\t\t};\n\t\t}\n\n\t\t/**\n   * Takes sources of coverage information and adds them to a collector which then can be subsequently\n   * remapped.\n   * @param  {Array|string}           sources  The source(s) of the JSON coverage information\n   * @param  {Object}                 options? A hash of options that can be set:\n   *                                               readJSON?: A function that can read and parse a JSON file\n   *                                               warn?: A function that logs warning messages\n   * @return {Object}                          The loaded coverage object\n   */\n\t\tfunction loadCoverage(sources) {\n\t\t\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\t\tvar warn = options.warn || console.warn;\n\n\t\t\tvar readJSON = options.readJSON || function (filePath) {\n\t\t\t\tif (!_fs2.default.existsSync(filePath)) {\n\t\t\t\t\twarn(new Error('Cannot find file: \"' + filePath + '\"'));\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\t\t\t\treturn JSON.parse(_fs2.default.readFileSync(filePath));\n\t\t\t};\n\n\t\t\tif (typeof sources === 'string') {\n\t\t\t\tsources = [sources];\n\t\t\t}\n\t\t\tif (!sources.length) {\n\t\t\t\twarn(new SyntaxError('No coverage files supplied!'));\n\t\t\t}\n\t\t\tvar collector = new _nodeIstanbul.Collector();\n\t\t\tsources.forEach(function (filePath) {\n\t\t\t\tcollector.add(readJSON(filePath));\n\t\t\t});\n\n\t\t\treturn collector.getFinalCoverage();\n\t\t};\n\t\tmodule.exports = exports['default'];\n\t});\n})(typeof define !== 'function' ? require('amdefine')(module) : define);\n//# sourceMappingURL=loadCoverage.js.map","/home/travis/build/npmtest/node-npmtest-remap-istanbul/node_modules/remap-istanbul/utils/node.js":"/* jshint node:true */\n/* global define:true */\n/*jshint -W079 */\nif (typeof define !== 'function') { /* istanbul ignore next */ var define = require('amdefine')(module); }\ndefine(['require', 'exports'], function (amdRequire, exports) {\n\tvar global = (function () {\n\t\treturn this;\n\t})();\n\tvar nodeRequire = global.require && global.require.nodeRequire || require;\n\tvar module = nodeRequire('module');\n\tfunction load(id, contextRequire, fn) {\n\t\tif ((id.indexOf('/') > -1) && module._findPath && module._nodeModulePaths) {\n\t\t\tvar localModulePath = module._findPath(id, module._nodeModulePaths(contextRequire.toUrl('.')));\n\t\t\tif (localModulePath !== false) {\n\t\t\t\tid = localModulePath;\n\t\t\t}\n\t\t}\n\t\tvar oldDefine = global.define;\n\t\tvar result;\n\t\tglobal.define = undefined;\n\t\ttry {\n\t\t\tresult = nodeRequire(id);\n\t\t}\n\t\tfinally {\n\t\t\tglobal.define = oldDefine;\n\t\t}\n\t\tfn(result);\n\t}\n\texports.load = load;\n\tfunction normalize(id, fn) {\n\t\tif (id.charAt(0) === '.') {\n\t\t\tid = amdRequire.toUrl(fn('./' + id));\n\t\t}\n\t\treturn id;\n\t}\n\texports.normalize = normalize;\n});\n","/home/travis/build/npmtest/node-npmtest-remap-istanbul/node_modules/remap-istanbul/lib/remap.js":"(function (define) {\n  define(['module', 'exports', './CoverageTransformer'], function (module, exports, _CoverageTransformer) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.default = remap;\n\n    var _CoverageTransformer2 = _interopRequireDefault(_CoverageTransformer);\n\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : {\n        default: obj\n      };\n    }\n\n    /**\n     * Remaps coverage data based on the source maps it discovers in the\n     * covered files and returns a coverage Collector that contains the remappped\n     * data.\n     * @param  {Array|Object} coverage The coverage (or array of coverages) that need to be\n     *                                 remapped\n     * @param  {Object} options A configuration object:\n     *                              basePath?    - a string containing to utilise as the base path\n     *                                             for determining the location of the source file\n     *                              exclude?     - a string or Regular Expression that filters out\n     *                                             any coverage where the file path matches\n     *                              mapFileName? - a function that takes the remapped file name and\n     *                                             and returns a string that should be the name in\n     *                                             the final coverage\n     *                              readFile?    - a function that can read a file\n     *                                             syncronously\n     *                              readJSON?    - a function that can read and parse a\n     *                                             JSON file syncronously\n     *                              sources?     - a Istanbul store where inline sources will be\n     *                                             added\n     *                              warn?        - a function that logs warnings\n     * @return {istanbul/lib/_collector}           The remapped collector\n     */\n    function remap(coverage) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var smc = new _CoverageTransformer2.default(options);\n\n      if (!Array.isArray(coverage)) {\n        coverage = [coverage];\n      }\n\n      coverage.forEach(function (item) {\n        smc.addCoverage(item);\n      });\n\n      return smc.getFinalCoverage();\n    }\n    module.exports = exports['default'];\n  });\n})(typeof define !== 'function' ? require('amdefine')(module) : define);\n//# sourceMappingURL=remap.js.map","/home/travis/build/npmtest/node-npmtest-remap-istanbul/node_modules/remap-istanbul/lib/CoverageTransformer.js":"(function (define) {\n\tdefine(['module', 'exports', '../utils/node!istanbul', '../utils/node!path', '../utils/node!fs', '../utils/node!source-map', './SparceCoverageCollector', './getMapping', './remapFunction', './remapBranch'], function (module, exports, _nodeIstanbul, _nodePath, _nodeFs, _nodeSourceMap, _SparceCoverageCollector, _getMapping, _remapFunction, _remapBranch) {\n\t\t'use strict';\n\n\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\tvalue: true\n\t\t});\n\n\t\tvar _nodePath2 = _interopRequireDefault(_nodePath);\n\n\t\tvar _nodeFs2 = _interopRequireDefault(_nodeFs);\n\n\t\tvar _SparceCoverageCollector2 = _interopRequireDefault(_SparceCoverageCollector);\n\n\t\tvar _getMapping2 = _interopRequireDefault(_getMapping);\n\n\t\tvar _remapFunction2 = _interopRequireDefault(_remapFunction);\n\n\t\tvar _remapBranch2 = _interopRequireDefault(_remapBranch);\n\n\t\tfunction _interopRequireDefault(obj) {\n\t\t\treturn obj && obj.__esModule ? obj : {\n\t\t\t\tdefault: obj\n\t\t\t};\n\t\t}\n\n\t\tfunction _defineProperty(obj, key, value) {\n\t\t\tif (key in obj) {\n\t\t\t\tObject.defineProperty(obj, key, {\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tobj[key] = value;\n\t\t\t}\n\n\t\t\treturn obj;\n\t\t}\n\n\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t}\n\t\t}\n\n\t\tvar _createClass = function () {\n\t\t\tfunction defineProperties(target, props) {\n\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\tvar descriptor = props[i];\n\t\t\t\t\tdescriptor.enumerable = descriptor.enumerable || false;\n\t\t\t\t\tdescriptor.configurable = true;\n\t\t\t\t\tif (\"value\" in descriptor) descriptor.writable = true;\n\t\t\t\t\tObject.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn function (Constructor, protoProps, staticProps) {\n\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);\n\t\t\t\tif (staticProps) defineProperties(Constructor, staticProps);\n\t\t\t\treturn Constructor;\n\t\t\t};\n\t\t}();\n\n\t\tvar sourceMapRegEx = /(?:\\/{2}[#@]{1,2}|\\/\\*)\\s+sourceMappingURL\\s*=\\s*(data:(?:[^;]+;)+base64,)?(\\S+)(?:\\n\\s*)?$/;\n\n\t\tvar CoverageTransformer = function () {\n\t\t\tfunction CoverageTransformer(options) {\n\t\t\t\t_classCallCheck(this, CoverageTransformer);\n\n\t\t\t\tthis.basePath = options.basePath;\n\t\t\t\tthis.warn = options.warn || console.warn;\n\n\t\t\t\tthis.exclude = function () {\n\t\t\t\t\treturn false;\n\t\t\t\t};\n\t\t\t\tif (options.exclude) {\n\t\t\t\t\tif (typeof options.exclude === 'function') {\n\t\t\t\t\t\tthis.exclude = options.exclude;\n\t\t\t\t\t} else if (typeof options.exclude === 'string') {\n\t\t\t\t\t\tthis.exclude = function (fileName) {\n\t\t\t\t\t\t\treturn fileName.indexOf(options.exclude) > -1;\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.exclude = function (fileName) {\n\t\t\t\t\t\t\treturn fileName.match(options.exclude);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.mapFileName = options.mapFileName || function (fileName) {\n\t\t\t\t\treturn fileName;\n\t\t\t\t};\n\n\t\t\t\tthis.useAbsolutePaths = !!options.useAbsolutePaths;\n\n\t\t\t\tthis.readJSON = options.readJSON || function readJSON(filePath) {\n\t\t\t\t\tif (!_nodeFs2.default.existsSync(filePath)) {\n\t\t\t\t\t\tthis.warn(Error('Could not find file: \"' + filePath + '\"'));\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\treturn JSON.parse(_nodeFs2.default.readFileSync(filePath));\n\t\t\t\t};\n\n\t\t\t\tthis.readFile = options.readFile || function readFile(filePath) {\n\t\t\t\t\tif (!_nodeFs2.default.existsSync(filePath)) {\n\t\t\t\t\t\tthis.warn(new Error('Could not find file: \"' + filePath + '\"'));\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t\treturn _nodeFs2.default.readFileSync(filePath);\n\t\t\t\t};\n\n\t\t\t\tthis.sourceStore = options.sources;\n\n\t\t\t\tthis.sparceCoverageCollector = new _SparceCoverageCollector2.default();\n\t\t\t}\n\n\t\t\t_createClass(CoverageTransformer, [{\n\t\t\t\tkey: 'addFileCoverage',\n\t\t\t\tvalue: function addFileCoverage(filePath, fileCoverage) {\n\t\t\t\t\tvar _this = this;\n\n\t\t\t\t\tif (this.exclude(filePath)) {\n\t\t\t\t\t\tthis.warn('Excluding: \"' + filePath + '\"');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar rawSourceMap = void 0;\n\t\t\t\t\tvar sourceMapDir = _nodePath2.default.dirname(filePath);\n\t\t\t\t\tvar codeIsArray = true;\n\t\t\t\t\tif (fileCoverage.inputSourceMap) {\n\t\t\t\t\t\trawSourceMap = fileCoverage.inputSourceMap;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/* coverage.json can sometimes include the code inline */\n\t\t\t\t\t\tvar codeFromFile = false;\n\t\t\t\t\t\tvar jsText = fileCoverage.code;\n\t\t\t\t\t\tif (!jsText) {\n\t\t\t\t\t\t\tjsText = this.readFile(filePath);\n\t\t\t\t\t\t\tcodeFromFile = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Array.isArray(jsText)) {\n\t\t\t\t\t\t\t/* sometimes the source is an array */\n\t\t\t\t\t\t\tjsText = jsText.join('\\n');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcodeIsArray = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar match = sourceMapRegEx.exec(jsText);\n\n\t\t\t\t\t\tif (!match && !codeFromFile) {\n\t\t\t\t\t\t\tcodeIsArray = false;\n\t\t\t\t\t\t\tjsText = this.readFile(filePath);\n\t\t\t\t\t\t\tmatch = sourceMapRegEx.exec(jsText);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\tif (match[1]) {\n\t\t\t\t\t\t\t\trawSourceMap = JSON.parse(new Buffer(match[2], 'base64').toString('utf8'));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvar sourceMapPath = _nodePath2.default.join(sourceMapDir, match[2]);\n\t\t\t\t\t\t\t\trawSourceMap = this.readJSON(sourceMapPath);\n\t\t\t\t\t\t\t\tsourceMapDir = _nodePath2.default.dirname(sourceMapPath);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!rawSourceMap) {\n\t\t\t\t\t\t/* We couldn't find a source map, so will copy coverage after warning. */\n\t\t\t\t\t\tthis.warn(new Error('Could not find source map for: \"' + filePath + '\"'));\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tfileCoverage.code = String(_nodeFs2.default.readFileSync(filePath)).split('\\n');\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthis.warn(new Error('Could find source for : \"' + filePath + '\"'));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.sparceCoverageCollector.setCoverage(filePath, fileCoverage);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tsourceMapDir = this.basePath || sourceMapDir;\n\n\t\t\t\t\t// Clean up source map paths:\n\t\t\t\t\t// * prepend sourceRoot if it is set\n\t\t\t\t\t// * replace relative paths in source maps with absolute\n\t\t\t\t\trawSourceMap.sources = rawSourceMap.sources.map(function (srcPath) {\n\t\t\t\t\t\tvar tempVal = srcPath;\n\t\t\t\t\t\tif (rawSourceMap.sourceRoot) {\n\t\t\t\t\t\t\ttempVal = /\\/$/g.test(rawSourceMap.sourceRoot) ? rawSourceMap.sourceRoot + srcPath : srcPath;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn tempVal.substr(0, 1) === '.' ? _nodePath2.default.resolve(sourceMapDir, tempVal) : tempVal;\n\t\t\t\t\t});\n\n\t\t\t\t\tvar sourceMap = new _nodeSourceMap.SourceMapConsumer(rawSourceMap);\n\n\t\t\t\t\t/* if there are inline sources and a store to put them into, we will populate it */\n\t\t\t\t\tvar inlineSourceMap = {};\n\t\t\t\t\tvar origSourceFilename = void 0;\n\t\t\t\t\tvar origFileName = void 0;\n\t\t\t\t\tvar fileName = void 0;\n\n\t\t\t\t\tif (sourceMap.sourcesContent) {\n\t\t\t\t\t\torigSourceFilename = rawSourceMap.sources[0];\n\n\t\t\t\t\t\tif (origSourceFilename && _nodePath2.default.extname(origSourceFilename) !== '' && rawSourceMap.sources.length === 1) {\n\t\t\t\t\t\t\torigFileName = rawSourceMap.file;\n\t\t\t\t\t\t\tfileName = filePath.replace(_nodePath2.default.extname(origFileName), _nodePath2.default.extname(origSourceFilename));\n\t\t\t\t\t\t\trawSourceMap.file = fileName;\n\t\t\t\t\t\t\trawSourceMap.sources = [fileName];\n\t\t\t\t\t\t\trawSourceMap.sourceRoot = '';\n\t\t\t\t\t\t\tsourceMap = new _nodeSourceMap.SourceMapConsumer(rawSourceMap);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsourceMap.sourcesContent.forEach(function (source, idx) {\n\t\t\t\t\t\t\tinlineSourceMap[sourceMap.sources[idx]] = true;\n\t\t\t\t\t\t\t_this.sparceCoverageCollector.setSourceCode(sourceMap.sources[idx], codeIsArray ? source.split('\\n') : source);\n\t\t\t\t\t\t\tif (_this.sourceStore) {\n\t\t\t\t\t\t\t\t_this.sourceStore.set(sourceMap.sources[idx], source);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tvar resolvePath = function resolvePath(source) {\n\t\t\t\t\t\tvar resolvedSource = source in inlineSourceMap ? source : _nodePath2.default.resolve(sourceMapDir, source);\n\n\t\t\t\t\t\tif (!_this.useAbsolutePaths && !(source in inlineSourceMap)) {\n\t\t\t\t\t\t\tresolvedSource = _nodePath2.default.relative(process.cwd(), resolvedSource);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn resolvedSource;\n\t\t\t\t\t};\n\n\t\t\t\t\tvar getMappingResolved = function getMappingResolved(location) {\n\t\t\t\t\t\tvar mapping = (0, _getMapping2.default)(sourceMap, location);\n\t\t\t\t\t\tif (!mapping) return null;\n\n\t\t\t\t\t\treturn Object.assign(mapping, { source: resolvePath(mapping.source) });\n\t\t\t\t\t};\n\n\t\t\t\t\tObject.keys(fileCoverage.branchMap).forEach(function (index) {\n\t\t\t\t\t\tvar genItem = fileCoverage.branchMap[index];\n\t\t\t\t\t\tvar hits = fileCoverage.b[index];\n\n\t\t\t\t\t\tvar info = (0, _remapBranch2.default)(genItem, getMappingResolved);\n\n\t\t\t\t\t\tif (info) {\n\t\t\t\t\t\t\t_this.sparceCoverageCollector.updateBranch(info.source, info.srcItem, hits);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tObject.keys(fileCoverage.fnMap).forEach(function (index) {\n\t\t\t\t\t\tvar genItem = fileCoverage.fnMap[index];\n\t\t\t\t\t\tvar hits = fileCoverage.f[index];\n\n\t\t\t\t\t\tvar info = (0, _remapFunction2.default)(genItem, getMappingResolved);\n\n\t\t\t\t\t\tif (info) {\n\t\t\t\t\t\t\t_this.sparceCoverageCollector.updateFunction(info.source, info.srcItem, hits);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tObject.keys(fileCoverage.statementMap).forEach(function (index) {\n\t\t\t\t\t\tvar genItem = fileCoverage.statementMap[index];\n\t\t\t\t\t\tvar hits = fileCoverage.s[index];\n\n\t\t\t\t\t\tvar mapping = getMappingResolved(genItem);\n\n\t\t\t\t\t\tif (mapping) {\n\t\t\t\t\t\t\t_this.sparceCoverageCollector.updateStatement(mapping.source, mapping.loc, hits);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// todo: refactor exposing implementation details\n\t\t\t\t\tvar srcCoverage = this.sparceCoverageCollector.getFinalCoverage();\n\n\t\t\t\t\tif (sourceMap.sourcesContent && this.basePath) {\n\t\t\t\t\t\t// Convert path to use base path option\n\t\t\t\t\t\tvar getPath = function getPath(filePath) {\n\t\t\t\t\t\t\tvar absolutePath = _nodePath2.default.resolve(_this.basePath, filePath);\n\t\t\t\t\t\t\tif (!_this.useAbsolutePaths) {\n\t\t\t\t\t\t\t\treturn _nodePath2.default.relative(process.cwd(), absolutePath);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn absolutePath;\n\t\t\t\t\t\t};\n\t\t\t\t\t\tvar fullSourceMapPath = getPath(origFileName.replace(_nodePath2.default.extname(origFileName), _nodePath2.default.extname(origSourceFilename)));\n\t\t\t\t\t\tsrcCoverage[fullSourceMapPath] = srcCoverage[fileName];\n\t\t\t\t\t\tsrcCoverage[fullSourceMapPath].path = fullSourceMapPath;\n\t\t\t\t\t\tdelete srcCoverage[fileName];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: 'addCoverage',\n\t\t\t\tvalue: function addCoverage(item) {\n\t\t\t\t\tvar _this2 = this;\n\n\t\t\t\t\tObject.keys(item).forEach(function (filePath) {\n\t\t\t\t\t\tvar fileCoverage = item[filePath];\n\t\t\t\t\t\t_this2.addFileCoverage(filePath, fileCoverage);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: 'getFinalCoverage',\n\t\t\t\tvalue: function getFinalCoverage() {\n\t\t\t\t\tvar _this3 = this;\n\n\t\t\t\t\tvar collector = new _nodeIstanbul.Collector();\n\n\t\t\t\t\tvar srcCoverage = this.sparceCoverageCollector.getFinalCoverage();\n\n\t\t\t\t\tObject.keys(srcCoverage).filter(function (filePath) {\n\t\t\t\t\t\treturn !_this3.exclude(filePath);\n\t\t\t\t\t}).forEach(function (filename) {\n\t\t\t\t\t\tvar coverage = Object.assign({}, srcCoverage[filename]);\n\t\t\t\t\t\tcoverage.path = _this3.mapFileName(filename);\n\t\t\t\t\t\tif (_this3.sourceStore && coverage.path !== filename) {\n\t\t\t\t\t\t\tvar source = _this3.sourceStore.get(filename);\n\t\t\t\t\t\t\t_this3.sourceStore.set(coverage.path, source);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollector.add(_defineProperty({}, coverage.path, coverage));\n\t\t\t\t\t});\n\n\t\t\t\t\t/* refreshes the line counts for reports */\n\t\t\t\t\tcollector.getFinalCoverage();\n\n\t\t\t\t\treturn collector;\n\t\t\t\t}\n\t\t\t}]);\n\n\t\t\treturn CoverageTransformer;\n\t\t}();\n\n\t\texports.default = CoverageTransformer;\n\t\tmodule.exports = exports['default'];\n\t});\n})(typeof define !== 'function' ? require('amdefine')(module) : define);\n//# sourceMappingURL=CoverageTransformer.js.map","/home/travis/build/npmtest/node-npmtest-remap-istanbul/node_modules/remap-istanbul/lib/SparceCoverageCollector.js":"(function (define) {\n\tdefine(['module', 'exports'], function (module, exports) {\n\t\t'use strict';\n\n\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\tvalue: true\n\t\t});\n\n\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t\t}\n\t\t}\n\n\t\tvar _createClass = function () {\n\t\t\tfunction defineProperties(target, props) {\n\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\tvar descriptor = props[i];\n\t\t\t\t\tdescriptor.enumerable = descriptor.enumerable || false;\n\t\t\t\t\tdescriptor.configurable = true;\n\t\t\t\t\tif (\"value\" in descriptor) descriptor.writable = true;\n\t\t\t\t\tObject.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn function (Constructor, protoProps, staticProps) {\n\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);\n\t\t\t\tif (staticProps) defineProperties(Constructor, staticProps);\n\t\t\t\treturn Constructor;\n\t\t\t};\n\t\t}();\n\n\t\tvar SparceCoverageCollector = function () {\n\t\t\tfunction SparceCoverageCollector() {\n\t\t\t\t_classCallCheck(this, SparceCoverageCollector);\n\n\t\t\t\tthis.srcCoverage = {};\n\t\t\t\tthis.metaInfo = {};\n\t\t\t}\n\n\t\t\t_createClass(SparceCoverageCollector, [{\n\t\t\t\tkey: 'getSourceCoverage',\n\t\t\t\tvalue: function getSourceCoverage(filename) {\n\t\t\t\t\tvar data = this.srcCoverage[filename];\n\t\t\t\t\tif (!data) {\n\t\t\t\t\t\tdata = this.srcCoverage[filename] = {\n\t\t\t\t\t\t\tpath: filename,\n\t\t\t\t\t\t\tstatementMap: {},\n\t\t\t\t\t\t\tfnMap: {},\n\t\t\t\t\t\t\tbranchMap: {},\n\t\t\t\t\t\t\ts: {},\n\t\t\t\t\t\t\tb: {},\n\t\t\t\t\t\t\tf: {}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.metaInfo[filename] = {\n\t\t\t\t\t\t\tindexes: {},\n\t\t\t\t\t\t\tlastIndex: {\n\t\t\t\t\t\t\t\ts: 0,\n\t\t\t\t\t\t\t\tb: 0,\n\t\t\t\t\t\t\t\tf: 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: data,\n\t\t\t\t\t\tmeta: this.metaInfo[filename]\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: 'setCoverage',\n\t\t\t\tvalue: function setCoverage(filePath, fileCoverage) {\n\t\t\t\t\tthis.srcCoverage[filePath] = fileCoverage;\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: 'setSourceCode',\n\t\t\t\tvalue: function setSourceCode(filePath, source) {\n\t\t\t\t\tthis.getSourceCoverage(filePath).data.code = source;\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: 'getFinalCoverage',\n\t\t\t\tvalue: function getFinalCoverage() {\n\t\t\t\t\treturn this.srcCoverage;\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: 'updateBranch',\n\t\t\t\tvalue: function updateBranch(source, srcItem, hits) {\n\t\t\t\t\tvar _getSourceCoverage = this.getSourceCoverage(source),\n\t\t\t\t\t    data = _getSourceCoverage.data,\n\t\t\t\t\t    meta = _getSourceCoverage.meta;\n\n\t\t\t\t\tvar key = ['b'];\n\t\t\t\t\tsrcItem.locations.map(function (loc) {\n\t\t\t\t\t\treturn key.push(loc.start.line, loc.start.column, loc.end.line, loc.end.line);\n\t\t\t\t\t});\n\n\t\t\t\t\tkey = key.join(':');\n\n\t\t\t\t\tvar index = meta.indexes[key];\n\t\t\t\t\tif (!index) {\n\t\t\t\t\t\tmeta.lastIndex.b += 1;\n\t\t\t\t\t\tindex = meta.lastIndex.b;\n\t\t\t\t\t\tmeta.indexes[key] = index;\n\t\t\t\t\t\tdata.branchMap[index] = srcItem;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!data.b[index]) {\n\t\t\t\t\t\tdata.b[index] = hits.map(function (v) {\n\t\t\t\t\t\t\treturn v;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (var i = 0; i < hits.length; i += 1) {\n\t\t\t\t\t\t\tdata.b[index][i] += hits[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: 'updateFunction',\n\t\t\t\tvalue: function updateFunction(source, srcItem, hits) {\n\t\t\t\t\tvar _getSourceCoverage2 = this.getSourceCoverage(source),\n\t\t\t\t\t    data = _getSourceCoverage2.data,\n\t\t\t\t\t    meta = _getSourceCoverage2.meta;\n\n\t\t\t\t\tvar key = ['f', srcItem.loc.start.line, srcItem.loc.start.column, srcItem.loc.end.line, srcItem.loc.end.column].join(':');\n\n\t\t\t\t\tvar index = meta.indexes[key];\n\t\t\t\t\tif (!index) {\n\t\t\t\t\t\tmeta.lastIndex.f += 1;\n\t\t\t\t\t\tindex = meta.lastIndex.f;\n\t\t\t\t\t\tmeta.indexes[key] = index;\n\t\t\t\t\t\tdata.fnMap[index] = srcItem;\n\t\t\t\t\t}\n\n\t\t\t\t\tdata.f[index] = data.f[index] || 0;\n\t\t\t\t\tdata.f[index] += hits;\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: 'updateStatement',\n\t\t\t\tvalue: function updateStatement(source, srcItem, hits) {\n\t\t\t\t\tvar _getSourceCoverage3 = this.getSourceCoverage(source),\n\t\t\t\t\t    data = _getSourceCoverage3.data,\n\t\t\t\t\t    meta = _getSourceCoverage3.meta;\n\n\t\t\t\t\tvar key = ['s', srcItem.start.line, srcItem.start.column, srcItem.end.line, srcItem.end.column].join(':');\n\n\t\t\t\t\tvar index = meta.indexes[key];\n\t\t\t\t\tif (!index) {\n\t\t\t\t\t\tmeta.lastIndex.s += 1;\n\t\t\t\t\t\tindex = meta.lastIndex.s;\n\t\t\t\t\t\tmeta.indexes[key] = index;\n\t\t\t\t\t\tdata.statementMap[index] = srcItem;\n\t\t\t\t\t}\n\n\t\t\t\t\tdata.s[index] = data.s[index] || 0;\n\t\t\t\t\tdata.s[index] += hits;\n\t\t\t\t}\n\t\t\t}]);\n\n\t\t\treturn SparceCoverageCollector;\n\t\t}();\n\n\t\texports.default = SparceCoverageCollector;\n\t\tmodule.exports = exports['default'];\n\t});\n})(typeof define !== 'function' ? require('amdefine')(module) : define);\n//# sourceMappingURL=SparceCoverageCollector.js.map","/home/travis/build/npmtest/node-npmtest-remap-istanbul/node_modules/remap-istanbul/lib/getMapping.js":"(function (define) {\n\tdefine(['module', 'exports', '../utils/node!source-map'], function (module, exports, _nodeSourceMap) {\n\t\t'use strict';\n\n\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\tvalue: true\n\t\t});\n\t\texports.default = getMapping;\n\n\n\t\t/**\n   * A function that determines the original position for a given location\n   * @param  {SourceMapConsumer} sourceMap        The source map\n   * @param  {Object}            location         The original location Object\n   * @return {Object}                             The remapped location Object\n   */\n\t\tfunction getMapping(sourceMap, location) {\n\t\t\t/* istanbul ignore if: edge case too hard to test for with babel malformation */\n\t\t\tif (location.start.line < 1 || location.start.column < 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t/* istanbul ignore if: edge case too hard to test for with babel malformation */\n\t\t\tif (location.end.line < 1 || location.end.column < 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar start = sourceMap.originalPositionFor(location.start);\n\t\t\tvar end = sourceMap.originalPositionFor(location.end);\n\n\t\t\t/* istanbul ignore if: edge case too hard to test for */\n\t\t\tif (!start || !end) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (!start.source || !end.source || start.source !== end.source) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t/* istanbul ignore if: edge case too hard to test for */\n\t\t\tif (start.line === null || start.column === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t/* istanbul ignore if: edge case too hard to test for */\n\t\t\tif (end.line === null || end.column === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (start.line === end.line && start.column === end.column) {\n\t\t\t\tend = sourceMap.originalPositionFor({\n\t\t\t\t\tline: location.end.line,\n\t\t\t\t\tcolumn: location.end.column,\n\t\t\t\t\tbias: _nodeSourceMap.SourceMapConsumer.LEAST_UPPER_BOUND\n\t\t\t\t});\n\t\t\t\tend.column -= 1;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tsource: start.source,\n\t\t\t\tloc: {\n\t\t\t\t\tstart: {\n\t\t\t\t\t\tline: start.line,\n\t\t\t\t\t\tcolumn: start.column\n\t\t\t\t\t},\n\t\t\t\t\tend: {\n\t\t\t\t\t\tline: end.line,\n\t\t\t\t\t\tcolumn: end.column\n\t\t\t\t\t},\n\t\t\t\t\tskip: location.skip\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tmodule.exports = exports['default'];\n\t});\n})(typeof define !== 'function' ? require('amdefine')(module) : define);\n//# sourceMappingURL=getMapping.js.map","/home/travis/build/npmtest/node-npmtest-remap-istanbul/node_modules/remap-istanbul/lib/remapFunction.js":"(function (define) {\n\tdefine([\"module\", \"exports\"], function (module, exports) {\n\t\t\"use strict\";\n\n\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\tvalue: true\n\t\t});\n\t\texports.default = remapFunction;\n\t\tfunction remapFunction(genItem, getMapping) {\n\t\t\tvar mapping = getMapping(genItem.loc);\n\n\t\t\tif (!mapping) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar srcItem = {\n\t\t\t\tname: genItem.name,\n\t\t\t\tline: mapping.loc.start.line,\n\t\t\t\tloc: mapping.loc\n\t\t\t};\n\n\t\t\tif (genItem.skip) {\n\t\t\t\tsrcItem.skip = genItem.skip;\n\t\t\t}\n\n\t\t\treturn { srcItem: srcItem, source: mapping.source };\n\t\t}\n\t\tmodule.exports = exports[\"default\"];\n\t});\n})(typeof define !== 'function' ? require('amdefine')(module) : define);\n//# sourceMappingURL=remapFunction.js.map","/home/travis/build/npmtest/node-npmtest-remap-istanbul/node_modules/remap-istanbul/lib/remapBranch.js":"(function (define) {\n\tdefine([\"module\", \"exports\"], function (module, exports) {\n\t\t\"use strict\";\n\n\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\tvalue: true\n\t\t});\n\t\texports.default = remapBranch;\n\t\tfunction remapBranch(genItem, getMapping) {\n\t\t\tvar locations = [];\n\t\t\tvar source = void 0;\n\n\t\t\tfor (var i = 0; i < genItem.locations.length; i += 1) {\n\t\t\t\tvar mapping = getMapping(genItem.locations[i]);\n\t\t\t\tif (!mapping) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t/* istanbul ignore else: edge case too hard to test for */\n\t\t\t\tif (!source) {\n\t\t\t\t\tsource = mapping.source;\n\t\t\t\t} else if (source !== mapping.source) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tlocations.push(mapping.loc);\n\t\t\t}\n\n\t\t\tvar srcItem = {\n\t\t\t\tline: locations[0].start.line,\n\t\t\t\ttype: genItem.type,\n\t\t\t\tlocations: locations\n\t\t\t};\n\n\t\t\treturn { source: source, srcItem: srcItem };\n\t\t}\n\t\tmodule.exports = exports[\"default\"];\n\t});\n})(typeof define !== 'function' ? require('amdefine')(module) : define);\n//# sourceMappingURL=remapBranch.js.map","/home/travis/build/npmtest/node-npmtest-remap-istanbul/node_modules/remap-istanbul/lib/writeReport.js":"(function (define) {\n\tdefine(['module', 'exports', 'istanbul/index'], function (module, exports) {\n\t\t'use strict';\n\n\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\tvalue: true\n\t\t});\n\t\texports.default = writeReport;\n\n\n\t\tvar istanbulReportTypes = {\n\t\t\tclover: 'file',\n\t\t\tcobertura: 'file',\n\t\t\thtml: 'directory',\n\t\t\t'json-summary': 'file',\n\t\t\tjson: 'file',\n\t\t\tlcovonly: 'file',\n\t\t\tteamcity: 'file',\n\t\t\t'text-lcov': 'console',\n\t\t\t'text-summary': 'file',\n\t\t\ttext: 'file'\n\t\t};\n\n\t\t/**\n   * Generates an Instanbul Coverage report based on the information passed.\n   * @param  {istanbul/lib/_collector} collector  An instance of an coverage\n   *                                             collector\n   * @param  {string}          reportType    The name of the report type to\n   *                                         generate\n   * @param  {object}       reportOptions The options to pass to the reporter\n   * @param  {string|function} dest          The filename or outputting\n   *                                         function to use for generating\n   *                                         the report\n   * @param  {istanbul/lib/store} sources?   A store of sources to be passed\n   *                                         the reporter\n   * @return {Promise}                       A promise that resolves when the\n   *                                         report is complete.\n   */\n\t\tfunction writeReport(collector, reportType, reportOptions, dest, sources) {\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tif (!(reportType in istanbulReportTypes)) {\n\t\t\t\t\treject(new SyntaxError('Unrecognized report type of \"' + reportType + '\".'));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar Reporter = require('istanbul/lib/report/' + reportType);\n\t\t\t\tvar options = Object.assign({}, reportOptions);\n\t\t\t\tswitch (istanbulReportTypes[reportType]) {\n\t\t\t\t\tcase 'file':\n\t\t\t\t\t\toptions.file = dest;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'directory':\n\t\t\t\t\t\toptions.dir = dest;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'console':\n\t\t\t\t\t\toptions.log = dest || console.log;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error('Unknown reporter type');\n\t\t\t\t}\n\t\t\t\tif (sources) {\n\t\t\t\t\toptions.sourceStore = sources;\n\t\t\t\t}\n\t\t\t\tvar reporter = new Reporter(options);\n\t\t\t\tresolve(reporter.writeReport(collector, true));\n\t\t\t});\n\t\t};\n\t\tmodule.exports = exports['default'];\n\t});\n})(typeof define !== 'function' ? require('amdefine')(module) : define);\n//# sourceMappingURL=writeReport.js.map","/home/travis/build/npmtest/node-npmtest-remap-istanbul/node_modules/remap-istanbul/babel-plugin/amd-define.js":"const template = require('babel-template');\n\nconst buildAmdDefine = template(`\n\t(function (define) {\n\t\tCODE;\n\t})(typeof define !== 'function' ? require('amdefine')(module) : define);\n`);\n\nmodule.exports = function ({ types: t }) {\n\treturn {\n\t\tvisitor: {\n\t\t\tProgram: {\n\t\t\t\texit: function (path) {\n\t\t\t\t\tif (this.ran) return;\n\t\t\t\t\tthis.ran = true;\n\n\t\t\t\t\tconst node = path.node;\n\t\t\t\t\tnode.body = [buildAmdDefine({\n\t\t\t\t\t\tCODE: node.body\n\t\t\t\t\t})];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n","/home/travis/build/npmtest/node-npmtest-remap-istanbul/node_modules/remap-istanbul/babel-plugin/module-exports.js":"// inspired by https://github.com/59naga/babel-plugin-add-module-exports/blob/master/src/index.js\n// however we didn't use the module itself because it didn't work with amd and didn't handle non-default\n// exports at the time of this comment anyway. \nmodule.exports = function ({ types: t }) {\n\treturn {\n\t\tvisitor: {\n\t\t\tProgram: {\n\t\t\t\texit: function (path) {\n\t\t\t\t\tif (this.ran) return;\n\t\t\t\t\tthis.ran = true;\n\n                    let hasExportDefault = false;\n                    const exports = [];\n\n                    path.get('body').forEach((path) => {\n                        if (path.isExportDefaultDeclaration()) {\n                            hasExportDefault = true;\n                        }\n\n                        if (path.isExportNamedDeclaration()) {\n                            if (path.node.specifiers.length === 1 && path.node.specifiers[0].exported.name === 'default') {\n                                hasExportDefault = true\n                            } else {\n                                exports.push(path.node.declaration.declarations[0].id.loc.identifierName);\n                            }\n                        }\n                    });\n\n                    if (hasExportDefault) {\n                        path.pushContainer('body', [\n                            t.expressionStatement(t.assignmentExpression(\n                                '=',\n                                t.memberExpression(t.identifier('module'), t.identifier('exports')),\n                                t.memberExpression(t.identifier('exports'), t.stringLiteral('default'), true)\n                            ))\n                        ]);\n                    }\n\n                    if (exports.length) {\n                        if (!hasExportDefault) {\n                            path.pushContainer('body', [\n                                t.expressionStatement(t.assignmentExpression(\n                                    '=',\n                                    t.memberExpression(t.identifier('module'), t.identifier('exports')),\n                                    t.objectExpression([])\n                                ))\n                            ]);\n                        }\n                        exports.forEach((name) => {\n                            path.pushContainer('body', [\n                                t.expressionStatement(t.assignmentExpression(\n                                    '=',\n                                    t.memberExpression(t.identifier('module.exports'), t.identifier(name)),\n                                    t.memberExpression(t.identifier('exports'), t.stringLiteral(name), true)\n                                ))\n                            ]);\n                        });\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n","/home/travis/build/npmtest/node-npmtest-remap-istanbul/node_modules/remap-istanbul/bin/remap-istanbul.js":"#!/usr/bin/env node\n\n'use strict';\n\nconst loadCoverage = require('../lib/loadCoverage');\nconst remap = require('../lib/remap');\nconst writeReport = require('../lib/writeReport');\nconst MemoryStore = require('istanbul/lib/store/memory');\nconst Collector = require('istanbul/lib/collector');\n\n/**\n * Helper function that reads from standard in and resolves a Promise with the\n * data or rejects with any errors.\n * @return {Promise} A promsie that is resolved with the data from standard in\n *                   or rejected with any errors.\n */\nfunction readStdIn() {\n\t/* istanbul ignore next: too challenging to test for reading from stdin */\n\treturn new Promise((resolve, reject) => {\n\t\tconst stdin = process.stdin;\n\t\tlet buffer = '';\n\n\t\tstdin.setEncoding('utf8');\n\n\t\tstdin.on('data', (data) => {\n\t\t\tbuffer += data;\n\t\t});\n\n\t\tstdin.on('error', (e) => {\n\t\t\treject(e);\n\t\t});\n\n\t\tstdin.on('end', () => {\n\t\t\tresolve(buffer);\n\t\t});\n\n\t\ttry {\n\t\t\tstdin.resume();\n\t\t} catch (e) {\n\t\t\treject(e);\n\t\t}\n\t});\n}\n\n/**\n * The main wrapper to provide a CLI interface to remap-istanbul\n * @param  {Array}   argv An array of arguments passed the process\n * @return {Promise}      A promise that resolves when the remapping is complete\n *                        or rejects if there is an error.\n */\nfunction main(argv) {\n\t/* jshint maxcomplexity:13 */\n\n\t/**\n\t * Helper function that processes the arguments\n\t * @return {String} The next valid argument\n\t */\n\tfunction getArg() {\n\t\tlet arg = argv.shift();\n\t\tif (arg && arg.indexOf('--') === 0) {\n\t\t\targ = arg.split('=');\n\t\t\tif (arg.length > 1) {\n\t\t\t\targv.unshift(arg.slice(1).join('='));\n\t\t\t}\n\t\t\targ = arg[0];\n\t\t} else if (arg && arg[0] === '-') {\n\t\t\t/* istanbul ignore if */\n\t\t\tif (arg.length > 2) {\n\t\t\t\targv = arg.substring(1).split('')\n\t\t\t\t\t.map((ch) => '-' + ch)\n\t\t\t\t\t.concat(argv);\n\t\t\t\targ = argv.shift();\n\t\t\t}\n\t\t}\n\n\t\treturn arg;\n\t}\n\n\tlet arg;\n\tconst inputFiles = [];\n\tlet output;\n\tlet reportType;\n\tlet basePath;\n\tlet exclude;\n\tfor (arg = getArg(); arg; arg = getArg()) {\n\t\tswitch (arg) {\n\t\t\tcase '-i':\n\t\t\tcase '--input':\n\t\t\t\tinputFiles.push(argv.shift());\n\t\t\t\tbreak;\n\t\t\tcase '-o':\n\t\t\tcase '--output':\n\t\t\t\toutput = argv.shift();\n\t\t\t\tbreak;\n\t\t\tcase '-b':\n\t\t\tcase '--basePath':\n\t\t\t\tbasePath = argv.shift();\n\t\t\t\tbreak;\n\t\t\tcase '-t':\n\t\t\tcase '--type':\n\t\t\t\treportType = argv.shift();\n\t\t\t\tbreak;\n\t\t\tcase '-e':\n\t\t\tcase '--exclude':\n\t\t\t\texclude = argv.shift();\n\t\t\t\tif (exclude.indexOf(',') !== -1) {\n\t\t\t\t\texclude = new RegExp(exclude.replace(/,/g, '|'));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new SyntaxError(`Unrecognised argument: \"${arg}\".`);\n\t\t}\n\t}\n\n\treturn new Promise((resolve, reject) => {\n\t\tconst coverage = inputFiles.length ? loadCoverage(inputFiles) :\n\t\t\t/* istanbul ignore next */\n\t\t\treadStdIn().then((data) => {\n\t\t\t\ttry {\n\t\t\t\t\tdata = JSON.parse(data);\n\t\t\t\t\tconst collector = new Collector();\n\t\t\t\t\tcollector.add(data);\n\t\t\t\t\treturn collector.getFinalCoverage();\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err.stack);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}, reject);\n\n\t\tresolve(coverage);\n\t}).then((coverage) => {\n\t\tlet sources = new MemoryStore();\n\t\tconst collector = remap(coverage, {\n\t\t\tsources,\n\t\t\tbasePath: basePath || undefined,\n\t\t\texclude: exclude || undefined,\n\t\t});\n\t\tif (!Object.keys(sources.map).length) {\n\t\t\tsources = undefined;\n\t\t}\n\t\tconst reportOptions = {};\n\t\tif (output) {\n\t\t\treturn writeReport(collector, reportType || 'json', reportOptions, output, sources);\n\t\t}\n\t\tif (reportType && (reportType === 'lcovonly' || reportType === 'text-lcov')) {\n\t\t\treturn writeReport(collector, 'text-lcov', reportOptions);\n\t\t}\n\t\tprocess.stdout.write(JSON.stringify(collector.getFinalCoverage()) + '\\n');\n\t\treturn null;\n\t});\n}\n\n/* istanbul ignore if: we use the module interface in testing */\nif (!module.parent) {\n\tprocess.title = 'remap-istanbul';\n\t/* first two arguments are meaningless to the process */\n\tmain(process.argv.slice(2))\n\t\t.then(\n\t\t\t(code) => process.exit(code || 0),\n\t\t\t(err) => {\n\t\t\t\tconsole.log(err.stack);\n\t\t\t\tprocess.exit(1);\n\t\t\t});\n} else {\n\tmodule.exports = main;\n}\n","/home/travis/build/npmtest/node-npmtest-remap-istanbul/node_modules/remap-istanbul/lib/checkThreshold.js":"(function (define) {\n    define(['module', 'exports', '../utils/node!istanbul', '../utils/node!minimatch'], function (module, exports, _nodeIstanbul, _nodeMinimatch) {\n        'use strict';\n\n        Object.defineProperty(exports, \"__esModule\", {\n            value: true\n        });\n        exports.default = checkThreshold;\n\n        var _nodeIstanbul2 = _interopRequireDefault(_nodeIstanbul);\n\n        var _nodeMinimatch2 = _interopRequireDefault(_nodeMinimatch);\n\n        function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : {\n                default: obj\n            };\n        }\n\n        function mixin(destination /*, ...mixins*/) {\n            for (var i = 1; i < arguments.length; i++) {\n                var source = arguments[i];\n                for (var key in source) {\n                    destination[key] = source[key];\n                }\n            }\n            return destination;\n        }\n\n        function overrideThresholds(key, overrides) {\n            var thresholds = {};\n\n            // First match wins\n            Object.keys(overrides).some(function (pattern) {\n                if ((0, _nodeMinimatch2.default)(normalize(key), pattern, { dot: true })) {\n                    thresholds = overrides[pattern];\n                    return true;\n                }\n            });\n\n            return thresholds;\n        }\n\n        function removeFiles(covObj, patterns) {\n            var obj = {};\n\n            Object.keys(covObj).forEach(function (key) {\n                // Do any patterns match the resolved key\n                var found = patterns.some(function (pattern) {\n                    return (0, _nodeMinimatch2.default)(normalize(key), pattern, { dot: true });\n                });\n\n                // if no patterns match, keep the key\n                if (!found) {\n                    obj[key] = covObj[key];\n                }\n            });\n\n            return obj;\n        }\n\n        function checkThreshold(checkOpt, collector) {\n            var defaultThresholds = {\n                global: {\n                    statements: 0,\n                    branches: 0,\n                    lines: 0,\n                    functions: 0,\n                    excludes: []\n                },\n                each: {\n                    statements: 0,\n                    branches: 0,\n                    lines: 0,\n                    functions: 0,\n                    excludes: [],\n                    overrides: {}\n                }\n            };\n\n            var thresholds = {\n                global: mixin(defaultThresholds.global, checkOpt.global),\n                each: mixin(defaultThresholds.each, checkOpt.each)\n            };\n\n            var rawCoverage = collector.getFinalCoverage();\n            var globalResults = _nodeIstanbul2.default.utils.summarizeCoverage(removeFiles(rawCoverage, thresholds.global.excludes));\n            var eachResults = removeFiles(rawCoverage, thresholds.each.excludes);\n\n            // Summarize per-file results and mutate original results.\n            Object.keys(eachResults).forEach(function (key) {\n                eachResults[key] = _nodeIstanbul2.default.utils.summarizeFileCoverage(eachResults[key]);\n            });\n\n            var coverageFailed = false;\n\n            function check(name, thresholds, actuals) {\n                var keys = ['statements', 'branches', 'lines', 'functions'];\n\n                keys.forEach(function (key) {\n                    var actual = actuals[key].pct;\n                    var actualUncovered = actuals[key].total - actuals[key].covered;\n                    var threshold = thresholds[key];\n\n                    if (threshold < 0) {\n                        if (threshold * -1 < actualUncovered) {\n                            coverageFailed = true;\n                            console.error('Uncovered count for ' + key + ' (' + actualUncovered + ') exceeds ' + name + ' threshold (' + -1 * threshold + ')');\n                        }\n                    } else {\n                        if (actual < threshold) {\n                            coverageFailed = true;\n                            console.error('Coverage for ' + key + ' (' + actual + '%) does not meet ' + name + ' threshold (' + threshold + '%)');\n                        }\n                    }\n                });\n            }\n\n            check('global', thresholds.global, globalResults);\n\n            Object.keys(eachResults).forEach(function (key) {\n                var keyThreshold = mixin(thresholds.each, overrideThresholds(key, thresholds.each.overrides));\n                check('per-file' + ' (' + key + ') ', keyThreshold, eachResults[key]);\n            });\n\n            return coverageFailed;\n        }\n        module.exports = exports['default'];\n    });\n})(typeof define !== 'function' ? require('amdefine')(module) : define);\n//# sourceMappingURL=checkThreshold.js.map","/home/travis/build/npmtest/node-npmtest-remap-istanbul/node_modules/remap-istanbul/lib/gruntRemapIstanbul.js":"(function (define) {\n\tdefine(['module', 'exports', './loadCoverage', './remap', './writeReport', '../utils/node!istanbul/lib/store/memory'], function (module, exports, _loadCoverage, _remap, _writeReport, _memory) {\n\t\t'use strict';\n\n\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\tvalue: true\n\t\t});\n\t\texports.default = gruntPlugin;\n\n\t\tvar _loadCoverage2 = _interopRequireDefault(_loadCoverage);\n\n\t\tvar _remap2 = _interopRequireDefault(_remap);\n\n\t\tvar _writeReport2 = _interopRequireDefault(_writeReport);\n\n\t\tvar _memory2 = _interopRequireDefault(_memory);\n\n\t\tfunction _interopRequireDefault(obj) {\n\t\t\treturn obj && obj.__esModule ? obj : {\n\t\t\t\tdefault: obj\n\t\t\t};\n\t\t}\n\n\t\t/* jshint node: true */\n\t\t/* global Promise */\n\n\t\tfunction gruntPlugin(grunt) {\n\t\t\tgrunt.registerMultiTask('remapIstanbul', function () {\n\t\t\t\tvar done = this.async();\n\t\t\t\tvar options = this.options();\n\t\t\t\tvar sources = new _memory2.default();\n\t\t\t\tvar p = [];\n\n\t\t\t\tfunction warn(message) {\n\t\t\t\t\tif (options.fail) {\n\t\t\t\t\t\tgrunt.fail.warn(message);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgrunt.log.error(message);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.files.forEach(function (file) {\n\t\t\t\t\tvar coverage = (0, _remap2.default)((0, _loadCoverage2.default)(file.src, {\n\t\t\t\t\t\treadJSON: grunt.readJSON,\n\t\t\t\t\t\twarn: warn\n\t\t\t\t\t}), {\n\t\t\t\t\t\treadFile: grunt.readFile,\n\t\t\t\t\t\treadJSON: grunt.readJSON,\n\t\t\t\t\t\twarn: warn,\n\t\t\t\t\t\tsources: sources,\n\t\t\t\t\t\tbasePath: file.basePath,\n\t\t\t\t\t\tuseAbsolutePaths: options.useAbsolutePaths,\n\t\t\t\t\t\texclude: options.exclude\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!Object.keys(sources.map).length) {\n\t\t\t\t\t\tsources = undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (file.type && file.dest) {\n\t\t\t\t\t\tp.push((0, _writeReport2.default)(coverage, file.type, {}, file.dest, sources));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tp = p.concat(Object.keys(options.reports).map(function (key) {\n\t\t\t\t\t\t\treturn (0, _writeReport2.default)(coverage, key, options.reportOpts || {}, options.reports[key], sources);\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tPromise.all(p).then(function () {\n\t\t\t\t\tdone();\n\t\t\t\t}, grunt.fail.fatal);\n\t\t\t});\n\t\t};\n\t\tmodule.exports = exports['default'];\n\t});\n})(typeof define !== 'function' ? require('amdefine')(module) : define);\n//# sourceMappingURL=gruntRemapIstanbul.js.map","/home/travis/build/npmtest/node-npmtest-remap-istanbul/node_modules/remap-istanbul/lib/gulpRemapIstanbul.js":"(function (define) {\n\tdefine(['module', 'exports', './remap', './writeReport', './checkThreshold', '../utils/node!istanbul/lib/store/memory', '../utils/node!gulp-util', '../utils/node!through2'], function (module, exports, _remap, _writeReport, _checkThreshold, _memory, _nodeGulpUtil, _nodeThrough) {\n\t\t'use strict';\n\n\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\tvalue: true\n\t\t});\n\t\texports.default = gulpPlugin;\n\n\t\tvar _remap2 = _interopRequireDefault(_remap);\n\n\t\tvar _writeReport2 = _interopRequireDefault(_writeReport);\n\n\t\tvar _checkThreshold2 = _interopRequireDefault(_checkThreshold);\n\n\t\tvar _memory2 = _interopRequireDefault(_memory);\n\n\t\tvar _nodeThrough2 = _interopRequireDefault(_nodeThrough);\n\n\t\tfunction _interopRequireDefault(obj) {\n\t\t\treturn obj && obj.__esModule ? obj : {\n\t\t\t\tdefault: obj\n\t\t\t};\n\t\t}\n\n\t\t/* global Promise */\n\n\t\t/* jshint node: true */\n\t\t/* jshint -W079 */\n\t\tfunction gulpPlugin() {\n\t\t\tvar opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\t\t\treturn _nodeThrough2.default.obj(function (file, enc, cb) {\n\t\t\t\tif (!opts.warn) {\n\t\t\t\t\topts.warn = function (message) {\n\t\t\t\t\t\tif (opts.fail) {\n\t\t\t\t\t\t\tcb(new _nodeGulpUtil.PluginError('remap-istanbul', message));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.error(message);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\topts.sources = new _memory2.default();\n\n\t\t\t\tif (file.isNull()) {\n\t\t\t\t\tcb(null, file);\n\t\t\t\t}\n\n\t\t\t\tif (file.isStream()) {\n\t\t\t\t\tcb(new _nodeGulpUtil.PluginError('remap-istanbul', 'Streaming not supported'));\n\t\t\t\t}\n\n\t\t\t\tvar collector = (0, _remap2.default)(JSON.parse(file.contents.toString('utf8')), opts);\n\n\t\t\t\tvar thresholdCheckFailed = false;\n\t\t\t\tif (opts.check) {\n\t\t\t\t\tthresholdCheckFailed = (0, _checkThreshold2.default)(opts.check, collector);\n\t\t\t\t}\n\n\t\t\t\tvar sources = void 0;\n\t\t\t\tif (Object.keys(opts.sources.map).length) {\n\t\t\t\t\tsources = opts.sources;\n\t\t\t\t}\n\n\t\t\t\tvar p = [];\n\t\t\t\tif (opts.reports) {\n\t\t\t\t\tObject.keys(opts.reports).forEach(function (key) {\n\t\t\t\t\t\tp.push((0, _writeReport2.default)(collector, key, opts.reportOpts || {}, opts.reports[key], sources));\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tfile.contents = new Buffer(JSON.stringify(collector.getFinalCoverage()));\n\n\t\t\t\tPromise.all(p).then(function () {\n\t\t\t\t\tif (thresholdCheckFailed) {\n\t\t\t\t\t\treturn cb(new _nodeGulpUtil.PluginError('remap-istanbul', 'Coverage threshold not met'));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcb(null, file);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\t\tmodule.exports = exports['default'];\n\t});\n})(typeof define !== 'function' ? require('amdefine')(module) : define);\n//# sourceMappingURL=gulpRemapIstanbul.js.map","/home/travis/build/npmtest/node-npmtest-remap-istanbul/node_modules/remap-istanbul/src/main.js":"/* jshint node:true */\n/* global Promise */\nimport _loadCoverage from './loadCoverage';\nimport _remap from './remap';\nimport _writeReport from './writeReport';\nimport MemoryStore from '../utils/node!istanbul/lib/store/memory';\n\nexport const loadCoverage = _loadCoverage;\nexport const remap = _remap;\nexport const writeReport = _writeReport;\n\n/**\n * The basic API for utilising remap-istanbul\n * @param  {Array|string} sources The sources that could be consumed and remapped.\n *                                For muliple sources to be combined together, provide\n *                                an array of strings.\n * @param  {Object} reports An object where each key is the report type required and the value\n *                          is the destination for the report.\n * @param  {Object} reportOptions? An object containing the report options.\n * @return {Promise}         A promise that will resolve when all the reports are written.\n */\nexport default function (sources, reports, reportOptions) {\n\tlet sourceStore = new MemoryStore();\n\tconst collector = _remap(_loadCoverage(sources), {\n\t\tsources: sourceStore,\n\t});\n\n\tif (!Object.keys(sourceStore.map).length) {\n\t\tsourceStore = undefined;\n\t}\n\n\n\treturn Promise.all(\n\t\tObject.keys(reports)\n\t\t\t.map(reportType =>\n\t\t\t\t_writeReport(collector, reportType, reportOptions || {}, reports[reportType], sourceStore)\n\t\t\t)\n\t);\n};\n","/home/travis/build/npmtest/node-npmtest-remap-istanbul/node_modules/remap-istanbul/tasks/remapIstanbul.js":"module.exports = require('../lib/gruntRemapIstanbul');\n","/home/travis/build/npmtest/node-npmtest-remap-istanbul/node_modules/remap-istanbul/lib/intern-reporters/JsonCoverage.js":"(function (define) {\n\tdefine(['module', 'exports', '../../utils/node!istanbul/lib/collector', '../../utils/node!istanbul/lib/report/json'], function (module, exports, _collector, _json) {\n\t\t'use strict';\n\n\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\tvalue: true\n\t\t});\n\n\t\tvar _collector2 = _interopRequireDefault(_collector);\n\n\t\tvar _json2 = _interopRequireDefault(_json);\n\n\t\tfunction _interopRequireDefault(obj) {\n\t\t\treturn obj && obj.__esModule ? obj : {\n\t\t\t\tdefault: obj\n\t\t\t};\n\t\t}\n\n\t\tfunction JsonCoverageReporter() {\n\t\t\tvar config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\t\t\tthis._collector = new _collector2.default();\n\t\t\tthis._reporter = new _json2.default({\n\t\t\t\tfile: config.filename,\n\t\t\t\twatermarks: config.watermarks\n\t\t\t});\n\t\t}\n\n\t\tJsonCoverageReporter.prototype.coverage = function coverage(sessionId, coverageData) {\n\t\t\tthis._collector.add(coverageData);\n\t\t};\n\n\t\tJsonCoverageReporter.prototype.runEnd = function runEnd() {\n\t\t\tthis._reporter.writeReport(this._collector, true);\n\t\t};\n\n\t\texports.default = JsonCoverageReporter;\n\t\tmodule.exports = exports['default'];\n\t});\n})(typeof define !== 'function' ? require('amdefine')(module) : define);\n//# sourceMappingURL=JsonCoverage.js.map"}